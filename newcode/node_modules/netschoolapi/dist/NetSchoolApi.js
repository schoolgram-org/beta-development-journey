"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const _NS_1 = __importDefault(require("./NetSchoolApi-safe.js"));
let activeClasses = 0;
const errors = [];
class NetSchoolApi extends _NS_1.default {
    constructor(credentials) {
        super(credentials);
        /** Уведомления */
        this.console = {
            info(title, ...optionalParams) {
                console.info("\x1b[46m\x1b[30m INFO \x1b[0m", title);
                if (!!optionalParams)
                    console.info(...optionalParams);
            },
            done(title, ...optionalParams) {
                console.info("\x1b[42m\x1b[30m DONE \x1b[0m", title);
                if (!!optionalParams)
                    console.info(...optionalParams);
            },
            error(title, ...optionalParams) {
                console.error("\x1b[41m\x1b[30m ERROR \x1b[0m", title);
                if (!!optionalParams)
                    console.error(...optionalParams);
            },
        };
        /** Начался ли процесс закрытия */
        this.startClosing = false;
        activeClasses++;
        this.console.info(`Класс пользователя ${this.credentials.login} создан`);
        // Если нажали Ctrl + C, то закрываем сессию
        process.addListener("SIGINT", this.closeProcess.bind(this));
        // Прежде чем завершить процесс, мы закрываем сессию
        process.addListener("beforeExit", this.closeProcess.bind(this));
        // Если произошла ошибка, мы закрываем сессию
        process.addListener("uncaughtException", (err) => {
            if (!errors.includes(err.name)) {
                this.console.error("Ошибка в коде привела к закрытию программы", err);
                errors.push(err.name);
            }
            this.closeProcess.bind(this);
        });
    }
    /** Контекст который доступен без авторизации */
    get contextAsync() {
        // Если нет контекста, то создаём (через авторизацию)
        return new Promise((resolve, reject) => {
            if (this.context) {
                resolve(this.context);
            }
            else {
                this.logIn()
                    .then(() => {
                    resolve(this.context);
                })
                    .catch(reject);
            }
        });
    }
    /** Открытие сессии (только если она закрыта) */
    logIn() {
        const _super = Object.create(null, {
            sessionValid: { get: () => super.sessionValid },
            logIn: { get: () => super.logIn }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const valid = yield _super.sessionValid.call(this);
            if (valid)
                return this.session;
            else
                return _super.logIn.call(this);
        });
    }
    /** Закрытие сессии (только если она открыта) */
    logOut() {
        const _super = Object.create(null, {
            sessionValid: { get: () => super.sessionValid },
            logOut: { get: () => super.logOut }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const valid = yield _super.sessionValid.call(this);
            if (valid)
                return _super.logOut.call(this);
            else
                return null;
        });
    }
    /** Повторное открытие сессии (всегда возвращает `true`) */
    sessionValid() {
        const _super = Object.create(null, {
            sessionValid: { get: () => super.sessionValid },
            logIn: { get: () => super.logIn }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield _super.sessionValid.call(this)))
                yield _super.logIn.call(this);
            return true;
        });
    }
    /** Экстренное закрытие сессии */
    closeProcess() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.startClosing)
                return;
            this.startClosing = true;
            // Закрываем сессию
            yield this.logOut()
                .then(() => this.console.done(`Сеанс ${this.credentials.login} успешно закрыт`))
                .catch((err) => this.console.error(`Ошибка закрытия сессии ${this.credentials.login}`, err));
            // Уменьшаем счетчик
            activeClasses--;
            // Если счетчик пуст, то закрываем процесс
            if (activeClasses === 0)
                process.exit(0);
        });
    }
}
exports.default = NetSchoolApi;
//# sourceMappingURL=NetSchoolApi.js.map