"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
const Diary_1 = __importDefault(require("../classes/Diary"));
const checks_1 = require("../utils/checks");
function default_1() {
    return __awaiter(this, arguments, void 0, function* (credentials = {}) {
        var _a;
        const { client, context } = yield checks_1.sessionValid.call(this);
        let { studentId, start, end } = credentials;
        studentId = checks_1.studentIdValid.call(this, studentId).id;
        if (start && end)
            checks_1.dateValid.call(this, start, end);
        else {
            const { weekStart } = yield client
                .get("student/diary/init")
                .then((res) => res.json());
            start = new Date(weekStart);
            end = new Date(weekStart);
            end.setDate(end.getDate() + 7);
        }
        const diaryRaw = yield client
            .get("student/diary", {
            params: {
                yearId: context.year.id,
                studentId,
                weekEnd: end.toJSON().replace(/T.+/, ""),
                weekStart: start.toJSON().replace(/T.+/, ""),
            },
        })
            .then((res) => res.json());
        const assignments = [];
        (_a = diaryRaw.weekDays) === null || _a === void 0 ? void 0 : _a.forEach((day) => {
            day.lessons.forEach((lesson) => {
                var _a;
                (_a = lesson.assignments) === null || _a === void 0 ? void 0 : _a.forEach((assignment) => {
                    assignments.push(assignment.id);
                });
            });
        });
        const attachmentsRaw = yield client
            .post("student/diary/get-attachments", {
            params: { studentId },
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                assignId: assignments,
            }),
        })
            .then((res) => res.json());
        const diaryObject = diaryRaw;
        if (diaryObject.weekDays)
            diaryObject.weekDays = diaryObject.weekDays.map((day) => (Object.assign(Object.assign({}, day), { lessons: day.lessons.map((lesson) => {
                    var _a;
                    return (Object.assign(Object.assign({}, lesson), { assignments: (_a = lesson.assignments) === null || _a === void 0 ? void 0 : _a.map((assignment) => {
                            var _a, _b;
                            const item = attachmentsRaw.find(({ assignmentId }) => assignment.id === assignmentId);
                            return Object.assign(Object.assign({}, assignment), { attachments: (_a = item === null || item === void 0 ? void 0 : item.attachments) !== null && _a !== void 0 ? _a : [], answerFiles: (_b = item === null || item === void 0 ? void 0 : item.answerFiles) !== null && _b !== void 0 ? _b : [] });
                        }) }));
                }) })));
        return new Diary_1.default(diaryObject);
    });
}
//# sourceMappingURL=diary.js.map