"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
function default_1(client) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f;
        const { filterSources: data } = yield client
            .get("reports/studentGrades")
            .then((res) => res.json());
        const classes = (_b = (_a = data
            .find((f) => f.filterId == "PCLID_IUP")) === null || _a === void 0 ? void 0 : _a.items.map((c) => ({
            id: parseInt(c.value),
            name: c.title,
            value: c.value,
        }))) !== null && _b !== void 0 ? _b : [];
        const subjects = (_d = (_c = data
            .find((f) => f.filterId == "SGID")) === null || _c === void 0 ? void 0 : _c.items.map((s) => ({
            id: parseInt(s.value),
            name: s.title,
            value: s.value,
        }))) !== null && _d !== void 0 ? _d : [];
        const students = (_f = (_e = data
            .find((f) => f.filterId == "SID")) === null || _e === void 0 ? void 0 : _e.items.map((s) => ({
            id: parseInt(s.value),
            name: s.title,
            value: s.value,
        }))) !== null && _f !== void 0 ? _f : [];
        const termFilters = data.find((f) => f.filterId == "TERMID");
        const terms = !termFilters
            ? []
            : yield Promise.all(termFilters.items.map((t) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const filters = yield client
                    .post("v2/reports/studentgrades/initfilters", {
                    body: JSON.stringify({
                        params: null,
                        selectedData: [{ filterId: "TERMID", filterValue: t.value }],
                    }),
                    headers: {
                        "Content-Type": "application/json",
                    },
                })
                    .then((res) => res.json());
                const termDates = (_a = filters.find((f) => f.filterId == "period")) === null || _a === void 0 ? void 0 : _a.range;
                if (!termDates)
                    throw new Error("Не удалось получить даты четверти");
                return {
                    id: parseInt(t.value),
                    name: t.title,
                    value: t.value,
                    isCurrent: termFilters.defaultValue == t.value,
                    start: new Date(termDates === null || termDates === void 0 ? void 0 : termDates.start),
                    end: new Date(termDates === null || termDates === void 0 ? void 0 : termDates.end),
                };
            })));
        return {
            user: {
                terms,
                classes,
                students,
            },
            subjects,
        };
    });
}
//# sourceMappingURL=studentGrades.js.map