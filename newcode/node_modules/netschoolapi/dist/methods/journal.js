"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = journal;
const Journal_1 = __importDefault(require("../classes/Journal"));
const dateNum_1 = require("../utils/dateNum");
const checks_1 = require("../utils/checks");
function journal() {
    return __awaiter(this, arguments, void 0, function* (credentials = {}) {
        const { context } = yield checks_1.sessionValid.call(this);
        let { start, end, termId, classId, studentId, transport } = credentials;
        // Проверяем валидность данных
        const termData = checks_1.termIdValid.call(this, termId);
        const classData = checks_1.classIdValid.call(this, classId);
        const studentData = checks_1.studentIdValid.call(this, studentId);
        // Если не указаны даты, то берем текущий учебный год
        const termDates = yield checks_1.termDateValid.call(this, termData.id, start, end);
        start = termDates.start;
        end = termDates.end;
        // Получаем текст отчета
        const htmlText = yield this.reportFile({
            url: context.compareServerVersion("5.24.0.0") == -1
                ? "reports/studenttotal/queue"
                : "v2/reports/studenttotal/queue",
            filters: [
                {
                    filterId: "SID",
                    filterValue: studentData.value,
                },
                {
                    filterId: "PCLID",
                    filterValue: classData.id.toString(),
                },
                {
                    filterId: "TERMID",
                    filterValue: termData.value,
                },
                {
                    filterId: "period",
                    filterValue: (0, dateNum_1.date2JSON)(start) + " - " + (0, dateNum_1.date2JSON)(end),
                },
            ],
            transport,
        });
        return new Journal_1.default({
            htmlText,
            terms: context.user.terms,
            subjects: context.subjects,
        });
    });
}
//# sourceMappingURL=journal.js.map