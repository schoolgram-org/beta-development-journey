"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dateNum_1 = require("../utils/dateNum");
const parseHtml_1 = require("../utils/parseHtml");
const ScheduleWeekLine_1 = __importDefault(require("./ScheduleWeekLine"));
const DATE_REGEX = /Расписание.+?с (\d{1,2}\.\d{1,2}\.\d{1,2})/;
class ScheduleWeek {
    constructor(credentials) {
        var _a, _b;
        let date = (_b = (_a = credentials.htmlText.match(DATE_REGEX)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : "08.04.04";
        this.raw = (0, parseHtml_1.outerHTML)({ html: credentials.htmlText, query: ".table" });
        this._date = (0, dateNum_1.date2JSON)(date);
    }
    get date() {
        return new Date(this._date);
    }
    get parsed() {
        return (0, parseHtml_1.table)({ html: this.raw }).map((tr, i) => {
            var _a, _b, _c, _d, _e, _f, _g;
            const [numberTd, nameTd] = (_b = (_a = tr === null || tr === void 0 ? void 0 : tr.querySelectorAll) === null || _a === void 0 ? void 0 : _a.call(tr, "td")) !== null && _b !== void 0 ? _b : [];
            const date = this.date;
            date.setDate(date.getDate() + i);
            const numbers = (_d = (_c = numberTd === null || numberTd === void 0 ? void 0 : numberTd.childNodes) === null || _c === void 0 ? void 0 : _c.filter((n) => n.nodeType == 3)) === null || _d === void 0 ? void 0 : _d.map((n) => parseInt(n.text));
            const names = (_f = (_e = nameTd === null || nameTd === void 0 ? void 0 : nameTd.childNodes) === null || _e === void 0 ? void 0 : _e.filter((n) => n.nodeType == 3)) === null || _f === void 0 ? void 0 : _f.map((n) => n.text);
            const lessons = [];
            for (let i = 0; i < names.length; i++) {
                const name = names[i];
                if (name == "-")
                    continue;
                lessons.push({
                    names: name.replace(/ \[.+?\]/g, "").split(", "),
                    number: numbers[i],
                    classesName: (_g = name
                        .match(/\[(\d+?)\]/g)) === null || _g === void 0 ? void 0 : _g.map((n) => n.replace(/\[|\]/g, "")),
                });
            }
            return new ScheduleWeekLine_1.default({
                date: (0, dateNum_1.date2JSON)(date),
                lessons,
            });
        });
    }
    toJSON() {
        return {
            raw: this.raw,
            date: this._date,
            parsed: this.parsed.map((i) => i.toJSON()),
        };
    }
}
exports.default = ScheduleWeek;
//# sourceMappingURL=ScheduleWeek.js.map