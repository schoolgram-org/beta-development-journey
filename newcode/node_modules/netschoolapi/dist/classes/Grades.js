"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dateNum_1 = require("../utils/dateNum");
const parseHtml_1 = require("../utils/parseHtml");
class Grades {
    constructor(credentials) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        this.raw = credentials.htmlText;
        this._types = credentials.types;
        const [start = "", end = ""] = (_b = (_a = (0, parseHtml_1.query)(this.raw, `table td:nth-child(2) > span:nth-child(${credentials.hasTerms ? 5 : 3})`)) === null || _a === void 0 ? void 0 : _a.structuredText.match(/((\d{1,2}\.){2}\d{2})/g)) !== null && _b !== void 0 ? _b : [];
        this.range = { start: (0, dateNum_1.str2date)(start), end: (0, dateNum_1.str2date)(end) };
        this.teacher =
            (_d = (_c = (0, parseHtml_1.query)(this.raw, `table td:nth-child(2) > span:nth-child(${credentials.hasTerms ? 11 : 9})`)) === null || _c === void 0 ? void 0 : _c.childNodes[1].text.trim()) !== null && _d !== void 0 ? _d : "";
        this.averageMark = +((_h = (_g = (_e = (0, parseHtml_1.query)(this.raw, ".table-print tr.totals td:nth-child(3)")) === null || _e === void 0 ? void 0 : (_f = _e.structuredText.replace(",", ".")).replace) === null || _g === void 0 ? void 0 : _g.call(_f, /^\D+(?=\d)/, "")) !== null && _h !== void 0 ? _h : "");
    }
    get assignments() {
        const trs = (0, parseHtml_1.table)({ html: this.raw, query: ".table-print" });
        trs.pop();
        return trs.map((tr) => {
            var _a;
            const [typeTd, themeTd, dateTd, issueDateTd, markTd] = (_a = tr.querySelectorAll("td")) !== null && _a !== void 0 ? _a : [];
            return {
                type: this._types.findByName(typeTd === null || typeTd === void 0 ? void 0 : typeTd.structuredText),
                theme: themeTd === null || themeTd === void 0 ? void 0 : themeTd.structuredText,
                date: (0, dateNum_1.str2date)(dateTd === null || dateTd === void 0 ? void 0 : dateTd.structuredText),
                issueDate: (0, dateNum_1.str2date)(issueDateTd === null || issueDateTd === void 0 ? void 0 : issueDateTd.structuredText),
                mark: +(markTd === null || markTd === void 0 ? void 0 : markTd.structuredText),
            };
        });
    }
    toJSON() {
        return {
            raw: this.raw,
            range: {
                start: (0, dateNum_1.date2JSON)(this.range.start),
                end: (0, dateNum_1.date2JSON)(this.range.end),
            },
            teacher: this.teacher,
            assignments: this.assignments.map((a) => (Object.assign(Object.assign({}, a), { date: (0, dateNum_1.date2JSON)(a.date), issueDate: (0, dateNum_1.date2JSON)(a.issueDate) }))),
        };
    }
}
exports.default = Grades;
//# sourceMappingURL=Grades.js.map