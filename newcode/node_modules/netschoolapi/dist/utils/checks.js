"use strict";
/**
 * Этот файл содержит функции, необходимые для проверки данных.
 * Они часто очень просты, но они слишком распространены в методах.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sessionValid = sessionValid;
exports.dateValid = dateValid;
exports.termDateValid = termDateValid;
exports.studentIdValid = studentIdValid;
exports.classIdValid = classIdValid;
exports.termIdValid = termIdValid;
/**
 * Проверяет валидность сессии.
 */
function sessionValid() {
    return __awaiter(this, void 0, void 0, function* () {
        if (!(yield this.sessionValid()) || !this.session || !this.context)
            throw new Error("Сначала надо открыть сессию.");
        return Object.assign({}, this);
    });
}
/**
 * Проверяет валидность дат
 */
function dateValid(...dates) {
    var _a;
    for (let date of dates)
        if (!((_a = this.context) === null || _a === void 0 ? void 0 : _a.checkDate(date)))
            throw new Error("Дата выходит за рамки учебного года");
    return dates;
}
/**
 * Проверяет валидность дат четверти или возвращает дефолтное значение.
 * @param this Класс библиотеки.
 * @param termId ID четверти.
 */
function termDateValid(termId, startDate, endDate) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        // Получаем четверть по id
        const term = (_a = this.context) === null || _a === void 0 ? void 0 : _a.user.terms.find((t) => t.id == termId);
        if (!term)
            throw new Error("Четверть не существует");
        // Проверяем даты
        const { start, end } = term;
        if (!startDate)
            startDate = start;
        if (!endDate)
            endDate = end;
        for (let date of [startDate, endDate])
            if (+date < +start && +end < +date)
                throw new Error(`Дата выходит за рамки четверти ${termId}`);
        // Возвращаем даты
        return { start: startDate, end: endDate };
    });
}
/**
 * Проверяет id пользователя или возвращает дефолтное
 */
function studentIdValid(id) {
    var _a;
    const context = this.context;
    if (!id)
        id = (_a = context.defaultStudent()) === null || _a === void 0 ? void 0 : _a.id;
    const data = id && context.getStudentById(id);
    if (data)
        return data;
    else
        throw new Error(`Нет пользователя c id: ${id}`);
}
/**
 * Проверяет id класса или возвращает дефолтное
 */
function classIdValid(id) {
    var _a;
    const context = this.context;
    if (!id)
        id = (_a = context.defaultClass()) === null || _a === void 0 ? void 0 : _a.id;
    const data = id && context.getClassById(id);
    if (data)
        return data;
    else
        throw new Error(`Нет класса c id: ${id}`);
}
/**
 * Проверяет id четверти или возвращает дефолтное
 */
function termIdValid(id) {
    var _a;
    const context = this.context;
    if (!id)
        id = (_a = context.defaultTerm()) === null || _a === void 0 ? void 0 : _a.id;
    const data = id && context.getTermById(id);
    if (data)
        return data;
    else
        throw new Error(`Нет четверти c id: ${id}`);
}
//# sourceMappingURL=checks.js.map