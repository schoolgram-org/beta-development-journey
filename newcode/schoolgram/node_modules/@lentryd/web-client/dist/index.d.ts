import WS, { ClientOptions } from "ws";
import fetch, { Response, RequestInit } from "node-fetch";
import type { HttpsProxyAgent } from "https-proxy-agent";
export type DecodeCookie = {
    [key: string]: string;
};
export type ExtraHeaders = {
    key: string;
    value: string | (() => string | undefined);
}[];
export type ExtraHeadersRaw = {
    [key: string]: string;
};
export type ResponseHook = (res: Response, url: string, init?: RequestInit) => Promise<void | Response> | void | Response;
export { Response };
export interface InitWS extends ClientOptions {
    params?: {
        [key: string]: any;
    };
}
export interface InitRequest extends RequestInit {
    params?: {
        [key: string]: any;
    };
}
/**
 * Class for working with the site
 */
export default class Client {
    private origin;
    /**
     * Convert object to form data format
     * @param body source object
     * @param init request options
     * @returns request options with form data
     */
    static formData(body: {
        [key: string]: any;
    }, init?: InitRequest): InitRequest;
    /**
     * Create a new instance of the Client class
     * @param origin Link to the site, for example http://example.com
     */
    constructor(origin: string);
    private _agent;
    agent: {
        get: () => HttpsProxyAgent<any> | undefined;
        set: (agent: HttpsProxyAgent<any>) => HttpsProxyAgent<any> | undefined;
    };
    private _cookie;
    cookie: {
        get: () => string;
        set: (cookie?: string[]) => string;
    };
    private _headers;
    headers: {
        get: () => ExtraHeadersRaw;
        set: (key: string, value: string | (() => string | undefined)) => ExtraHeadersRaw;
        del: (key: string) => ExtraHeadersRaw;
    };
    private _path;
    path: {
        get: () => string;
        set: (path: string) => string;
    };
    private _responseHook;
    onResponse(hook: ResponseHook): void;
    /**
     * Join the path to the origin
     * @param paths Path to the required resource
     * @returns Full path to the resource
     */
    join(...paths: string[]): string;
    ws(url: string, init?: InitWS): WS;
    /**
     * Method for make request to the site
     * @param url relative path to the resource
     * @param init request options
     * @returns response
     */
    request(url: string, init?: InitRequest): Promise<Response>;
    /**
     * Get request
     * @param url relative path to the resource
     * @param init request options
     * @returns response
     */
    get(url: string, init?: Omit<InitRequest, "method">): Promise<fetch.Response>;
    /**
     * Post request
     * @param url relative path to the resource
     * @param init request options
     * @returns response
     */
    post(url: string, init?: Omit<InitRequest, "method">): Promise<fetch.Response>;
}
