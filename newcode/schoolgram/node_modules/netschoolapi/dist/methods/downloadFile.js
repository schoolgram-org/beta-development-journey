"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
const checks_1 = require("../utils/checks");
function default_1(credentials) {
    return __awaiter(this, void 0, void 0, function* () {
        const { client } = yield checks_1.sessionValid.call(this);
        let { id, assignId, studentId } = credentials;
        studentId = checks_1.studentIdValid.call(this, studentId).id;
        const response = yield client
            .post("student/diary/get-attachments", {
            params: { studentId },
            headers: {
                Referer: client.join("../angular/school/studentdiary/"),
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                assignId: [assignId],
            }),
        })
            .then((res) => res.text());
        if (!response.includes(id.toString()))
            throw new Error(`Нет файла ${id} для задания ${assignId}`);
        return client.get(`attachments/${id}`).then((res) => res.buffer());
    });
}
//# sourceMappingURL=downloadFile.js.map