"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
const Context_1 = __importDefault(require("../../classes/Context"));
const sysInfo_1 = __importDefault(require("./methods/sysInfo"));
const context_1 = __importDefault(require("./methods/context"));
const schoolInfo_1 = __importDefault(require("./methods/schoolInfo"));
const studentGrades_1 = __importDefault(require("./methods/studentGrades"));
function default_1() {
    return __awaiter(this, void 0, void 0, function* () {
        const { client } = this;
        const [{ server }, { year, user, server: server1, schoolId }, { user: user1, subjects },] = yield Promise.all([
            (0, sysInfo_1.default)(client),
            (0, context_1.default)(client),
            (0, studentGrades_1.default)(client),
        ]);
        return new Context_1.default({
            year,
            user: Object.assign(Object.assign({}, user), user1),
            server: Object.assign(Object.assign({}, server), server1),
            school: Object.assign(Object.assign({}, (yield (0, schoolInfo_1.default)(client, schoolId))), { id: schoolId }),
            subjects,
        });
    });
}
//# sourceMappingURL=index.js.map