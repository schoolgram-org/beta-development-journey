import Context from "../classes/Context";
/** Параметры для инициализации */
interface Credentials {
    htmlText: string;
    terms: Context["user"]["terms"];
    subjects: Context["subjects"];
}
/** Тип данных распарсенных предметов */
export interface Subject {
    /** ID предмета */
    id: number;
    /** Название предмета */
    name: string;
    /** Массив оценок */
    marks: {
        mark: number;
        date: Date;
        termId: number;
    }[];
    /** Массив точек (долгов) */
    dotList: {
        date: Date;
        termId: number;
    }[];
    /** Массив пропусков */
    missedList: {
        type: string;
        date: Date;
        termId: number;
    }[];
    /** Итоговые оценки */
    totalMarks: {
        mark: number;
        termId: number;
    }[];
    /** Средние оценки */
    middleMarks: {
        mark: number;
        termId: number;
    }[];
    /** Средняя оценка за выбранный период */
    periodMiddleMark: number;
    /** Средняя оценка
     *
     * _В следующих версиях будет удален, используйте .periodMiddleMark_
     * @deprecated */
    middleMark: number;
}
/** Тип данных распарсенных предметов (JSON) */
export interface SubjectData {
    /** ID предмета */
    id: number;
    /** Название предмета */
    name: string;
    /** Массив оценок */
    marks: {
        mark: number;
        date: string;
        termId: number;
    }[];
    /** Массив точек (долгов) */
    dotList: {
        date: string;
        termId: number;
    }[];
    /** Массив пропусков */
    missedList: {
        type: string;
        date: string;
        termId: number;
    }[];
    /** Итоговые оценки */
    totalMarks: {
        mark: number;
        termId: number;
    }[];
    /** Средние оценки */
    middleMarks: {
        mark: number;
        termId: number;
    }[];
    /** Средняя оценка за выбранный период */
    periodMiddleMark: number;
    /** Средняя оценка
     *
     * _В следующих версиях будет удален, используйте .periodMiddleMark_
     * @deprecated */
    middleMark: number;
}
/** Данные журнала в формате JSON */
export interface JournalData {
    raw: string;
    range: {
        start: string;
        end: string;
    };
    subjects: SubjectData[];
}
export default class Journal {
    /** HTML код отчета */
    raw: string;
    /** Промежуток отчета */
    range: {
        /** Начало отчета */
        start: Date;
        /** Конец отчета */
        end: Date;
    };
    private _terms;
    private _subjects;
    constructor(credentials: Credentials);
    /** Проверяет наличия деления на четверти */
    private get _hasTerms();
    /** Получаем распарсенные оценки по предметам */
    get subjects(): Subject[];
    toJSON(): JournalData;
}
export {};
