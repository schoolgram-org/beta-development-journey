"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const compare_versions_1 = require("compare-versions");
class Context {
    constructor(credentials) {
        this.user = credentials.user;
        this.year = credentials.year;
        this.server = credentials.server;
        this.school = credentials.school;
        this.subjects = credentials.subjects;
    }
    /** Проверяет является ли число частью года */
    checkDate(date) {
        const { start, end } = this.year;
        return +start <= +date && +date <= +end;
    }
    /** Существует ли четверть */
    termExists(id) {
        return !!this.user.terms.find((t) => t.id == id);
    }
    /** ID текущей четверти */
    defaultTerm() {
        return this.user.terms.find((t) => t.isCurrent);
    }
    /** Получить четверть по ID */
    getTermById(id) {
        return this.user.terms.find((t) => t.id == id);
    }
    /** Существует ли класс */
    classExists(id) {
        return !!this.getClassById(id);
    }
    /** ID первого класса */
    defaultClass() {
        return this.user.classes[0];
    }
    /** Получить класс по ID */
    getClassById(id) {
        return this.user.classes.find((c) => c.id == id);
    }
    /** Существует ли ученик */
    studentExists(id) {
        return !!this.getStudentById(id);
    }
    /** ID первого ученика */
    defaultStudent() {
        return this.user.students[0];
    }
    /** Получить ученика по ID */
    getStudentById(id) {
        return this.user.students.find((s) => s.id == id);
    }
    /** Существует ли предмет */
    subjectExists(id) {
        return !!this.subjects.find((s) => s.id == id);
    }
    /**
     * Сравнивает версию сервера с указанной
     * @param version Версия сервера с которой сравнивается
     * @returns 1 если указанная версия больше, -1 если меньше, 0 если равны
     */
    compareServerVersion(version) {
        return (0, compare_versions_1.compareVersions)(this.server.version, version);
    }
}
exports.default = Context;
//# sourceMappingURL=Context.js.map