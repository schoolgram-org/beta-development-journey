"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const parseHtml_1 = require("../utils/parseHtml");
const dateNum_1 = require("../utils/dateNum");
const ScheduleDayLine_1 = __importDefault(require("./ScheduleDayLine"));
function timeFormat(date, strDate) {
    if (strDate.includes(" ")) {
        const [date1, time] = strDate.split(" ");
        const [day, month] = date1.split(".");
        return date
            .replace(/-\d{2}-/, "-" + (0, dateNum_1.num2str)(month) + "-")
            .replace(/-\d{2}T/, "-" + (0, dateNum_1.num2str)(day) + "T")
            .replace(/T.+/, "T" + time);
    }
    else {
        return date.replace(/T.+/, "T" + strDate);
    }
}
class ScheduleDay {
    constructor(credentials) {
        this.raw = (0, parseHtml_1.outerHTML)({ html: credentials.htmlText, query: ".table" });
        this._date = credentials.date;
    }
    get date() {
        return new Date(this._date);
    }
    get lines() {
        return (0, parseHtml_1.table)({ html: this.raw }).map((tr) => {
            var _a, _b, _c;
            const [timeTd, nameTd] = (_b = (_a = tr === null || tr === void 0 ? void 0 : tr.querySelectorAll) === null || _a === void 0 ? void 0 : _a.call(tr, "td")) !== null && _b !== void 0 ? _b : [];
            let [start, end] = timeTd === null || timeTd === void 0 ? void 0 : timeTd.structuredText.split(" - ");
            const startDate = timeFormat(this._date, start);
            const endDate = timeFormat(this._date, end);
            let name = nameTd === null || nameTd === void 0 ? void 0 : nameTd.structuredText;
            const className = (_c = name.match(/\[(.+)\]/)) === null || _c === void 0 ? void 0 : _c[1];
            if (className)
                name = name.replace(/ \[(.+)\]/, "");
            return new ScheduleDayLine_1.default({ name, endDate, startDate, className });
        });
    }
    toJSON() {
        return {
            raw: this.raw,
            date: this._date,
            lines: this.lines.map((line) => line.toJSON()),
        };
    }
}
exports.default = ScheduleDay;
//# sourceMappingURL=ScheduleDay.js.map